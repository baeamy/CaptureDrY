


ARM Macro Assembler    Page 1 


    1 00000000         ; StringConversion.s
    2 00000000         ; Student names: Amy Bae & Isha Taneja
    3 00000000         ; Last modification date: 3/7/2023
    4 00000000         ; Runs on TM4C123
    5 00000000         ; ECE319K lab 7 number to string conversions
    6 00000000         ;
    7 00000000         ; Used in ECE319K Labs 7,8,9,10. You write these two fun
                       ctions
    8 00000000         
    9 00000000                 EXPORT           Dec2String
   10 00000000                 EXPORT           Fix2String
   11 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   12 00000000                 THUMB
   13 00000000                 PRESERVE8
   14 00000000         
   15 00000000 00000000 
                       IndexForArray
                               EQU              0           ; R5
   16 00000000 00000004 
                       IndexForStack
                               EQU              4           ; R6
   17 00000000 00000008 
                       Count   EQU              8           ; R10
   18 00000000         ;-----------------------Dec2String----------------------
                       -
   19 00000000         ; Convert a 32-bit number into unsigned decimal format
   20 00000000         ; String the string into the empty array add null-termin
                       ation
   21 00000000         ; Input: R0 (call by value) 32-bit unsigned number
   22 00000000         ;        R1 pointer to empty array
   23 00000000         ; Output: none
   24 00000000         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   25 00000000         
   26 00000000         Dec2String
   27 00000000 E92D 41F0       PUSH             {R4, LR, R5, R6, R7, R8}
   28 00000004 B082            SUB              SP, #8
   29 00000006 46E8            MOV              R8, SP      ; R8 is frame point
                                                            er ; SP is a regist
                                                            er
   30 00000008 F004 0400       AND              R4, #0
   31 0000000C B510            PUSH             {R4, LR}    ; pushing the null 
                                                            terminator 
   32 0000000E F04F 070A       MOV              R7, #10
   33 00000012 F8D8 5000       LDR              R5, [R8, #IndexForArray]
   34 00000016 F005 0500       AND              R5, #0
   35 0000001A F8C8 5000       STR              R5, [R8, #IndexForArray]
   36 0000001E F8D8 6004       LDR              R6, [R8, #IndexForStack]
   37 00000022 F006 0600       AND              R6, #0
   38 00000026 F8C8 6004       STR              R6, [R8, #IndexForStack]
   39 0000002A 4602            MOV              R2, R0      ; R2 = 2437
   40 0000002C 4603            MOV              R3, R0      ; R3 = 2437
   41 0000002E         loopDEC
   42 0000002E FBB2 FCF7       UDIV             R12, R2, R7 ; R12 has 243 ; R12
                                                             has 24 ; R12 has 2
                                                            ; R12 gets 0
   43 00000032 4662            MOV              R2, R12     ; R2 has 243 ; R2 h
                                                            as 24 ; R2 has 2



ARM Macro Assembler    Page 2 


   44 00000034 FB0C FC07       MUL              R12, R7     ; R12 has 2430 ; R1
                                                            2 has 240 ; R12 has
                                                             20
   45 00000038 EBA3 040C       SUB              R4, R3, R12 ; R4 has output of 
                                                            7 ; R4 has output o
                                                            f 3 ; R4 has 4
   46 0000003C 4613            MOV              R3, R2      ; R3 gets 243 ; R3 
                                                            gets 24 ; R3 gets 2
                                                            
   47 0000003E 2B00            CMP              R3, #0
   48 00000040 D003            BEQ              last
   49 00000042 F104 0430       ADD              R4, #0x30   ; R4 has x37 ; R4 g
                                                            ets x33 ; R3 gets x
                                                            32
   50 00000046 B510            PUSH             {R4, LR}
   51 00000048 E7F1            B                loopDEC
   52 0000004A         last
   53 0000004A F104 0430       ADD              R4, #0x30   ; R4 has x37 ; R4 g
                                                            ets x33 ; R3 gets x
                                                            32
   54 0000004E B510            PUSH             {R4, LR}
   55 00000050         StartPop
   56 00000050 E8BD 4010       POP              {R4, LR}
   57 00000054 2C00            CMP              R4, #0
   58 00000056 D00D            BEQ              lastPop
   59 00000058         
   60 00000058 F8D8 5000       LDR              R5, [R8, #IndexForArray] ; R5 g
                                                            ets the content of 
                                                            IndexForArray
   61 0000005C 514C            STR              R4, [R1, R5] ; using R5 as the 
                                                            index
   62 0000005E F105 0501       ADD              R5, #1      ; updating index
   63 00000062 F8C8 5000       STR              R5, [R8, #IndexForArray] ; putt
                                                            ing it back in the 
                                                            stack
   64 00000066         
   65 00000066 F8D8 6004       LDR              R6, [R8, #IndexForStack]
   66 0000006A F106 0602       ADD              R6,#2
   67 0000006E F8C8 6004       STR              R6, [R8, #IndexForStack]
   68 00000072         
   69 00000072 E7ED            B                StartPop
   70 00000074         lastPop
   71 00000074 F8D8 5000       LDR              R5, [R8, #IndexForArray] ; R5 g
                                                            ets the content of 
                                                            IndexForArray
   72 00000078 514C            STR              R4, [R1, R5] ; using R5 as the 
                                                            index
   73 0000007A B002            ADD              SP, #8
   74 0000007C E8BD 41F0       POP              {R4, LR, R5, R6, R7, R8}
   75 00000080 4770            BX               LR
   76 00000082         ;* * * * * * * * End of Dec2String * * * * * * * *
   77 00000082         
   78 00000082         
   79 00000082         ; -----------------------Fix2String---------------------
                       -
   80 00000082         ; Create characters for LCD display in fixed-point forma
                       t
   81 00000082         ; unsigned decimal, resolution 0.001, range 0.000 to 9.9
                       99



ARM Macro Assembler    Page 3 


   82 00000082         ; Inputs:  R0 is an unsigned 32-bit number
   83 00000082         ;          R1 pointer to empty array
   84 00000082         ; Outputs: none
   85 00000082         ; E.g., R0=0,    then create "0.000 "
   86 00000082         ;       R0=3,    then create "0.003"
   87 00000082         ;       R0=89,   then create "0.089"
   88 00000082         ;       R0=123,  then create "0.123"
   89 00000082         ;       R0=9999, then create "9.999"
   90 00000082         ;       R0>9999, then create "*.***"
   91 00000082         ; Invariables: This function must not permanently modify
                        registers R4 to R11
   92 00000082         
   93 00000082         Fix2String
   94 00000082 E92D 57F8       PUSH             {R4, LR, R5, R6, R7, R8, R9, R1
0, R12, R3}
   95 00000086 B082            SUB              SP, #8
   96 00000088 46E8            MOV              R8, SP      ; R8 is frame point
                                                            er ; SP is a regist
                                                            er
   97 0000008A F004 0400       AND              R4, #0
   98 0000008E B510            PUSH             {R4, LR}    ; pushing the null 
                                                            terminator 
   99 00000090 F04F 070A       MOV              R7, #10
  100 00000094 F8D8 5000       LDR              R5, [R8, #IndexForArray]
  101 00000098 F005 0500       AND              R5, #0
  102 0000009C F8C8 5000       STR              R5, [R8, #IndexForArray]
  103 000000A0 F8D8 6004       LDR              R6, [R8, #IndexForStack]
  104 000000A4 F006 0600       AND              R6, #0
  105 000000A8 F8C8 6004       STR              R6, [R8, #IndexForStack]
  106 000000AC F8D8 A008       LDR              R10, [R8, #Count]
  107 000000B0 F00A 0A00       AND              R10, #0
  108 000000B4 F8C8 A008       STR              R10, [R8, #Count]
  109 000000B8 F242 790F       MOV              R9, #9999
  110 000000BC 4548            CMP              R0, R9
  111 000000BE D82F            BHI              Asterisk
  112 000000C0 4602            MOV              R2, R0
  113 000000C2 4603            MOV              R3, R0
  114 000000C4 F04F 0420       MOV              R4, #0x20
  115 000000C8 B510            PUSH             {R4, LR}    ; pushing space
  116 000000CA         loopFIX
  117 000000CA FBB2 FCF7       UDIV             R12, R2, R7 ; R12 has 243 ; R12
                                                             has 24 ; R12 has 2
                                                            ; R12 gets 0
  118 000000CE 4662            MOV              R2, R12     ; R2 has 243 ; R2 h
                                                            as 24 ; R2 has 2
  119 000000D0 FB0C FC07       MUL              R12, R7     ; R12 has 2430 ; R1
                                                            2 has 240 ; R12 has
                                                             20
  120 000000D4 EBA3 040C       SUB              R4, R3, R12 ; R4 has output of 
                                                            7 ; R4 has output o
                                                            f 3 ; R4 has 4
  121 000000D8 4613            MOV              R3, R2      ; R3 gets 243 ; R3 
                                                            gets 24 ; R3 gets 2
                                                            
  122 000000DA F104 0430       ADD              R4, #0x30   ; R4 has x37 ; R4 g
                                                            ets x33 ; R3 gets x
                                                            32
  123 000000DE B510            PUSH             {R4, LR}
  124 000000E0 F8D8 A008       LDR              R10, [R8, #Count]



ARM Macro Assembler    Page 4 


  125 000000E4 F10A 0A01       ADD              R10, #1
  126 000000E8 F8C8 A008       STR              R10, [R8, #Count]
  127 000000EC F8D8 A008       LDR              R10, [R8, #Count]
  128 000000F0 2809            CMP              R0, #9
  129 000000F2 D93A            BLS              Digit1
  130 000000F4 2863            CMP              R0, #99
  131 000000F6 D94B            BLS              Digit2
  132 000000F8 F240 39E7       MOV              R9, #999
  133 000000FC 4548            CMP              R0, R9
  134 000000FE D951            BLS              Digit3
  135 00000100         ; if it gets here that means it's a 4 digit number
  136 00000100         Digit4
  137 00000100 F1BA 0F03       CMP              R10, #3
  138 00000104 DBE1            BLT              loopFIX
  139 00000106 F1BA 0F04       CMP              R10, #4
  140 0000010A F04F 042E       MOV              R4, #0x2E   ; ascii for period
  141 0000010E B510            PUSH             {R4, LR}
  142 00000110 F44F 747A       MOV              R4, #1000
  143 00000114 FBB0 F4F4       UDIV             R4, R0, R4
  144 00000118 F104 0430       ADD              R4, #0x30
  145 0000011C B510            PUSH             {R4, LR}
  146 0000011E E012            B                StartPopFIX
  147 00000120         Asterisk
  148 00000120 F04F 042A       MOV              R4, #0x2A   ; ascii for asteris
                                                            k
  149 00000124 B510            PUSH             {R4, LR}
  150 00000126 F8D8 A008       LDR              R10, [R8, #Count]
  151 0000012A F10A 0A01       ADD              R10, #1
  152 0000012E F8C8 A008       STR              R10, [R8, #Count]
  153 00000132 F1BA 0F03       CMP              R10, #3
  154 00000136 DBF3            BLT              Asterisk
  155 00000138 F04F 042E       MOV              R4, #0x2E   ; ascii for period
  156 0000013C B510            PUSH             {R4, LR}
  157 0000013E F04F 042A       MOV              R4, #0x2A   ; ascii for asteris
                                                            k
  158 00000142 B510            PUSH             {R4, LR}
  159 00000144 E7FF            B                StartPopFIX
  160 00000146         StartPopFIX
  161 00000146 E8BD 4010       POP              {R4, LR}
  162 0000014A         ;CMP R4, #0
  163 0000014A         ;BEQ lastPopFIX
  164 0000014A F8D8 5000       LDR              R5, [R8, #IndexForArray] ; R5 g
                                                            ets the content of 
                                                            IndexForArray
  165 0000014E 514C            STR              R4, [R1, R5] ; using R5 as the 
                                                            index ; storing val
                                                            ue in array
  166 00000150 F105 0501       ADD              R5, #1      ; updating index
  167 00000154 F8C8 5000       STR              R5, [R8, #IndexForArray] ; putt
                                                            ing it back in the 
                                                            stack
  168 00000158 F8D8 6004       LDR              R6, [R8, #IndexForStack]
  169 0000015C F106 0602       ADD              R6,#2
  170 00000160 F8C8 6004       STR              R6, [R8, #IndexForStack]
  171 00000164 2C00            CMP              R4, #0
  172 00000166 D027            BEQ              lastPopFIX
  173 00000168 E7ED            B                StartPopFIX
  174 0000016A         Digit1
  175 0000016A F04F 0430       MOV              R4, #0x30   ; ascii for '0'



ARM Macro Assembler    Page 5 


  176 0000016E B510            PUSH             {R4, LR}
  177 00000170 F8D8 A008       LDR              R10, [R8, #Count]
  178 00000174 F10A 0A01       ADD              R10, #1
  179 00000178 F8C8 A008       STR              R10, [R8, #Count]
  180 0000017C F1BA 0F03       CMP              R10, #3
  181 00000180 DBF3            BLT              Digit1
  182 00000182 F04F 042E       MOV              R4, #0x2E   ; ascii for period
  183 00000186 B510            PUSH             {R4, LR}
  184 00000188 F04F 0430       MOV              R4, #0x30   ; ascii for '0'
  185 0000018C B510            PUSH             {R4, LR}
  186 0000018E E7DA            B                StartPopFIX
  187 00000190         Digit2
  188 00000190 F1BA 0F03       CMP              R10, #3
  189 00000194 DB99            BLT              loopFIX
  190 00000196 F04F 042E       MOV              R4, #0x2E   ; ascii for period
  191 0000019A B510            PUSH             {R4, LR}
  192 0000019C F04F 0430       MOV              R4, #0x30   ; ascii for '0'
  193 000001A0 B510            PUSH             {R4, LR}
  194 000001A2 E7D0            B                StartPopFIX
  195 000001A4         Digit3
  196 000001A4 F1BA 0F03       CMP              R10, #3
  197 000001A8 DB8F            BLT              loopFIX
  198 000001AA F04F 042E       MOV              R4, #0x2E   ; ascii for period
  199 000001AE B510            PUSH             {R4, LR}
  200 000001B0 F04F 0430       MOV              R4, #0x30   ; ascii for '0'
  201 000001B4 B510            PUSH             {R4, LR}
  202 000001B6 E7C6            B                StartPopFIX
  203 000001B8         lastPopFIX
  204 000001B8 F8D8 5000       LDR              R5, [R8, #IndexForArray] ; R5 g
                                                            ets the content of 
                                                            IndexForArray
  205 000001BC 514C            STR              R4, [R1, R5] ; using R5 as the 
                                                            index
  206 000001BE B002            ADD              SP, #8
  207 000001C0 E8BD 57F8       POP              {R4, LR, R5, R6, R7, R8, R9, R1
0, R12, R3}
  208 000001C4 4770            BX               LR
  209 000001C6         
  210 000001C6 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  211 000001C8                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\stringconversion.d -o.\stringconversion.o -I.\RTE\_SpaceInva
ders -IC:\Users\amyhb\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Includ
e -IC:\Users\amyhb\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\T
M4C123 --predefine="__UVISION_VERSION SETA 538" --predefine="_RTE_ SETA 1" --pr
edefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\stringconvers
ion.lst ..\inc\StringConversion.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 11 in file ..\inc\StringConversion.s
   Uses
      None
Comment: .text unused
Asterisk 00000120

Symbol: Asterisk
   Definitions
      At line 147 in file ..\inc\StringConversion.s
   Uses
      At line 111 in file ..\inc\StringConversion.s
      At line 154 in file ..\inc\StringConversion.s

Dec2String 00000000

Symbol: Dec2String
   Definitions
      At line 26 in file ..\inc\StringConversion.s
   Uses
      At line 9 in file ..\inc\StringConversion.s
Comment: Dec2String used once
Digit1 0000016A

Symbol: Digit1
   Definitions
      At line 174 in file ..\inc\StringConversion.s
   Uses
      At line 129 in file ..\inc\StringConversion.s
      At line 181 in file ..\inc\StringConversion.s

Digit2 00000190

Symbol: Digit2
   Definitions
      At line 187 in file ..\inc\StringConversion.s
   Uses
      At line 131 in file ..\inc\StringConversion.s
Comment: Digit2 used once
Digit3 000001A4

Symbol: Digit3
   Definitions
      At line 195 in file ..\inc\StringConversion.s
   Uses
      At line 134 in file ..\inc\StringConversion.s
Comment: Digit3 used once
Digit4 00000100

Symbol: Digit4
   Definitions
      At line 136 in file ..\inc\StringConversion.s
   Uses
      None
Comment: Digit4 unused
Fix2String 00000082



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Fix2String
   Definitions
      At line 93 in file ..\inc\StringConversion.s
   Uses
      At line 10 in file ..\inc\StringConversion.s
Comment: Fix2String used once
StartPop 00000050

Symbol: StartPop
   Definitions
      At line 55 in file ..\inc\StringConversion.s
   Uses
      At line 69 in file ..\inc\StringConversion.s
Comment: StartPop used once
StartPopFIX 00000146

Symbol: StartPopFIX
   Definitions
      At line 160 in file ..\inc\StringConversion.s
   Uses
      At line 146 in file ..\inc\StringConversion.s
      At line 159 in file ..\inc\StringConversion.s
      At line 173 in file ..\inc\StringConversion.s
      At line 186 in file ..\inc\StringConversion.s
      At line 194 in file ..\inc\StringConversion.s
      At line 202 in file ..\inc\StringConversion.s

last 0000004A

Symbol: last
   Definitions
      At line 52 in file ..\inc\StringConversion.s
   Uses
      At line 48 in file ..\inc\StringConversion.s
Comment: last used once
lastPop 00000074

Symbol: lastPop
   Definitions
      At line 70 in file ..\inc\StringConversion.s
   Uses
      At line 58 in file ..\inc\StringConversion.s
Comment: lastPop used once
lastPopFIX 000001B8

Symbol: lastPopFIX
   Definitions
      At line 203 in file ..\inc\StringConversion.s
   Uses
      At line 172 in file ..\inc\StringConversion.s
Comment: lastPopFIX used once
loopDEC 0000002E

Symbol: loopDEC
   Definitions
      At line 41 in file ..\inc\StringConversion.s
   Uses
      At line 51 in file ..\inc\StringConversion.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: loopDEC used once
loopFIX 000000CA

Symbol: loopFIX
   Definitions
      At line 116 in file ..\inc\StringConversion.s
   Uses
      At line 138 in file ..\inc\StringConversion.s
      At line 189 in file ..\inc\StringConversion.s
      At line 197 in file ..\inc\StringConversion.s

15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

Count 00000008

Symbol: Count
   Definitions
      At line 17 in file ..\inc\StringConversion.s
   Uses
      At line 106 in file ..\inc\StringConversion.s
      At line 108 in file ..\inc\StringConversion.s
      At line 124 in file ..\inc\StringConversion.s
      At line 126 in file ..\inc\StringConversion.s
      At line 127 in file ..\inc\StringConversion.s
      At line 150 in file ..\inc\StringConversion.s
      At line 152 in file ..\inc\StringConversion.s
      At line 177 in file ..\inc\StringConversion.s
      At line 179 in file ..\inc\StringConversion.s

IndexForArray 00000000

Symbol: IndexForArray
   Definitions
      At line 15 in file ..\inc\StringConversion.s
   Uses
      At line 33 in file ..\inc\StringConversion.s
      At line 35 in file ..\inc\StringConversion.s
      At line 60 in file ..\inc\StringConversion.s
      At line 63 in file ..\inc\StringConversion.s
      At line 71 in file ..\inc\StringConversion.s
      At line 100 in file ..\inc\StringConversion.s
      At line 102 in file ..\inc\StringConversion.s
      At line 164 in file ..\inc\StringConversion.s
      At line 167 in file ..\inc\StringConversion.s
      At line 204 in file ..\inc\StringConversion.s

IndexForStack 00000004

Symbol: IndexForStack
   Definitions
      At line 16 in file ..\inc\StringConversion.s
   Uses
      At line 36 in file ..\inc\StringConversion.s
      At line 38 in file ..\inc\StringConversion.s
      At line 65 in file ..\inc\StringConversion.s
      At line 67 in file ..\inc\StringConversion.s
      At line 103 in file ..\inc\StringConversion.s
      At line 105 in file ..\inc\StringConversion.s
      At line 168 in file ..\inc\StringConversion.s
      At line 170 in file ..\inc\StringConversion.s

3 symbols
351 symbols in table
