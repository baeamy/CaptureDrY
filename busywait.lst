


ARM Macro Assembler    Page 1 


    1 00000000         ; BusyWait.s
    2 00000000         ; Student names: Amy Bae & Isha Taneja
    3 00000000         ; Last modification date: 3/7/2023
    4 00000000         
    5 00000000         ; Runs on TM4C123
    6 00000000         
    7 00000000         ; As part of Lab 7, students need to implement these two
                        functions
    8 00000000         ; This file is in the inc folder so it automatically wil
                       l be applied to labs 7 8 9 and 10
    9 00000000         
   10 00000000         
   11 00000000                 EXPORT           SPIOutCommand
   12 00000000                 EXPORT           SPIOutData
   13 00000000         
   14 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   15 00000000                 THUMB
   16 00000000                 ALIGN
   17 00000000         ; Used in ECE319K Labs 7,8,9,10. You write these two fun
                       ctions
   18 00000000         
   19 00000000         ; ***********SPIOutCommand*****************
   20 00000000         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   21 00000000         ; Inputs: R0 = 32-bit command (number)
   22 00000000         ;         R1 = 32-bit SPI status register address
   23 00000000         ;         R2 = 32-bit SPI data register address
   24 00000000         ;         R3 = 32-bit GPIO port address for D/C
   25 00000000         ; Outputs: none
   26 00000000         ; Assumes: SPI and GPIO have already been initialized an
                       d enabled
   27 00000000         ; Note: must be AAPCS compliant
   28 00000000         ; Note: access to bit 6 of GPIO must be friendly
   29 00000000         SPIOutCommand
   30 00000000         ;1) Read the SPI status register (R1 has address) and ch
                       eck bit 4, 
   31 00000000         ;2) If bit 4 is high, loop back to step 1 (wait for BUSY
                        bit to be low)
   32 00000000         ;3) Clear D/C (GPIO bit 6) to zero, be friendly (R3 has 
                       address)
   33 00000000         ;4) Write the command to the SPI data register (R2 has a
                       ddress)
   34 00000000         ;5) Read the SPI status register (R1 has address) and ch
                       eck bit 4, 
   35 00000000         ;6) If bit 4 is high, loop back to step 5 (wait for BUSY
                        bit to be low)
   36 00000000 B430            PUSH{R4,         R5}
   37 00000002         loop
   38 00000002 680C            LDR              R4, [R1]
   39 00000004 F004 0410       AND              R4, R4, #0x10 
                                                            ; isolating bit 4 
   40 00000008 2C00            CMP              R4, #0
   41 0000000A D1FA            BNE              loop
   42 0000000C 681D            LDR              R5, [R3]
   43 0000000E F025 0540       BIC              R5, R5, #0x40
   44 00000012 601D            STR              R5, [R3]
   45 00000014 6010            STR              R0, [R2]
   46 00000016         loop2



ARM Macro Assembler    Page 2 


   47 00000016 680C            LDR              R4, [R1]
   48 00000018 F004 0410       AND              R4, R4, #0x10 
                                                            ; isolating bit 4 
   49 0000001C 2C00            CMP              R4, #0
   50 0000001E D1FA            BNE              loop2
   51 00000020 BC30            POP              {R4, R5}
   52 00000022 4770            BX               LR          ;   return
   53 00000024         ; ***********SPIOutData*****************
   54 00000024         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
   55 00000024         ; Inputs: R0 = 32-bit data (number)
   56 00000024         ;         R1 = 32-bit SPI status register address
   57 00000024         ;         R2 = 32-bit SPI data register address
   58 00000024         ;         R3 = 32-bit GPIO port address for D/C
   59 00000024         ; Outputs: none
   60 00000024         ; Assumes: SPI and GPIO have already been initialized an
                       d enabled
   61 00000024         ; Note: must be AAPCS compliant
   62 00000024         ; Note: access to bit 6 of GPIO must be friendly
   63 00000024         SPIOutData
   64 00000024         ;1) Read the SPI status register (R1 has address) and ch
                       eck bit 1, 
   65 00000024         ;2) If bit 1 is low, loop back to step 1 (wait for TNF b
                       it to be high)
   66 00000024         ;3) Set D/C (GPIO bit 6) to one, be friendly (R3 has add
                       ress)
   67 00000024         ;4) Write the data to the SPI data register (R2 has addr
                       ess)
   68 00000024 B430            PUSH             {R4, R5}
   69 00000026         loop3
   70 00000026 680C            LDR              R4, [R1]
   71 00000028 F004 0402       AND              R4, #0x02   ; isolating bit 1
   72 0000002C 2C00            CMP              R4, #0
   73 0000002E D0FA            BEQ              loop3
   74 00000030 681D            LDR              R5, [R3]
   75 00000032 F045 0540       ORR              R5, R5, #0x40
   76 00000036 601D            STR              R5, [R3]
   77 00000038 6010            STR              R0, [R2]
   78 0000003A BC30            POP              {R4, R5}
   79 0000003C 4770            BX               LR          ;return
   80 0000003E         ;****************************************************
   81 0000003E         
   82 0000003E 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
   83 00000040                 END                          ; end of file
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\busywait.d -o.\busywait.o -I.\RTE\_SpaceInvaders -IC:\Users\
amyhb\AppData\Local\Arm\Packs\ARM\CMSIS\5.9.0\CMSIS\Core\Include -IC:\Users\amy
hb\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefi
ne="__UVISION_VERSION SETA 538" --predefine="_RTE_ SETA 1" --predefine="TM4C123
GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\busywait.lst ..\inc\BusyWait.
s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 14 in file ..\inc\BusyWait.s
   Uses
      None
Comment: .text unused
SPIOutCommand 00000000

Symbol: SPIOutCommand
   Definitions
      At line 29 in file ..\inc\BusyWait.s
   Uses
      At line 11 in file ..\inc\BusyWait.s
Comment: SPIOutCommand used once
SPIOutData 00000024

Symbol: SPIOutData
   Definitions
      At line 63 in file ..\inc\BusyWait.s
   Uses
      At line 12 in file ..\inc\BusyWait.s
Comment: SPIOutData used once
loop 00000002

Symbol: loop
   Definitions
      At line 37 in file ..\inc\BusyWait.s
   Uses
      At line 41 in file ..\inc\BusyWait.s
Comment: loop used once
loop2 00000016

Symbol: loop2
   Definitions
      At line 46 in file ..\inc\BusyWait.s
   Uses
      At line 50 in file ..\inc\BusyWait.s
Comment: loop2 used once
loop3 00000026

Symbol: loop3
   Definitions
      At line 69 in file ..\inc\BusyWait.s
   Uses
      At line 73 in file ..\inc\BusyWait.s
Comment: loop3 used once
6 symbols
339 symbols in table
